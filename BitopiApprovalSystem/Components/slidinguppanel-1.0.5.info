{"Name":"SlidingUpPanel","Id":3157,"Alias":"slidinguppanel","Description":"Add an awesome draggable panel that slides up from either the bottom or top of your screen. Use it to show more details, reveal music player controls or whatever you want. This type of panel is also used in apps such as Google Music and Rdio.\n\n## Key features\n\n- Customizable height\n- Customizable shadow\n- Restrict draggable area of panel to \n    - A visible view\n    - An anchor point\n- Listen to events when dragging the panel\n- Switch between sliding from top or bottom\n\n## Requirements\n\nThis library uses Android Support v4, and it is tested on Android 2.2 and above.\n\n## Usage\n\nTo use it, add the component and in your layout simply wrap your layouts with `cheesebaron.slidinguppanel.SlidingUpPanelLayout`. It supports two children. The first child is your content layout. The second child is your layout for the sliding up panel. Both children should have their height set to\n`match_parent`.\n\n```\n\u003ccheesebaron.slidinguppanel.SlidingUpPanelLayout\n    android:id=\"@+id/sliding_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"bottom\"\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003c!-- Your main content inside here --\u003e\n    \u003c/RelativeLayout\u003e\n\n    \u003cRelativeLayout\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\u003e\n        \u003c!-- Your main sliding panel inside here --\u003e\n    \u003c/RelativeLayout\u003e\n\u003c/cheesebaron.slidinguppanel.SlidingUpPanelLayout\u003e\n```\n\nThe project is Open Source and can be [forked on GitHub](https://github.com/Cheesebaron/SlidingUpPanel).\n","Version":"1.0.5","Summary":"A panel that slides out from the bottom or top of the screen.","QuickStart":"Start by creating or editing an existing AXML layout file. Add `cheesebaron.slidinguppanel.SlidingUpPanelLayout` as the root of this layout.\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003ccheesebaron.slidinguppanel.SlidingUpPanelLayout \n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    android:id=\"@+id/sliding_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"bottom\"\u003e\n    \u003c!-- Main content --\u003e\n    \u003cTextView\n        android:id=\"@+id/main\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"Main Content\"\n        android:textSize=\"16sp\" /\u003e\n    \u003c!-- Sliding panel --\u003e\n    \u003cTextView\n        android:id=\"@+id/main\"\n        android:layout_width=\"match_parent\"\n        android:layout_height=\"match_parent\"\n        android:text=\"Sliding Panel\"\n        android:textSize=\"16sp\" /\u003e\n\u003c/cheesebaron.slidinguppanel.SlidingUpPanelLayout\u003e\n```\n\nThe `SlidingUpPanelLayout` supports at most to nested children views. The first being the main content if you View, the second being the content of the sliding panel. The `android:gravity` attribute determines whether you have the menu on the `top` or the `bottom` of the screen. The two attributes `android:layout_width` and `android:layout_height`, for the root layout, both need to be set to `match_parent`. The same goes for the two nested child layouts.\n\nAs the `SlidingUpPanelLayout` only supports two nested Views, you will have to wrap additional Views in a container such as `LinearLayout`, `FrameLayout` or `RelativeLayout`\n\n## Supported attributes\n\n`SlidingUpPanelLayout` supports a variety of attributes to allow you to customize its behavior. Remember to add the namespace `xmlns:app=\"http://schemas.android.com/apk/res-auto\"` to your layout.\n\nThen you can use the following attributes:\n\n- `collapsedHeight` sets the height of the drawer when it is collapsed. Use a dimension value `dp`, `sp`, `px` for this.\n- `shadowHeight` sets the height of the shadow. Use a dimension value `dp`, `sp`, `px` for this.\n- `fadeColor` sets the color to fade the main content with, when sliding the panel on top of it.\n- `flingVelocity` set the velocity of which the panel allows to be flinged to either be opened or closed.\n- `dragView` set the `id` of the view you want to restrict to allow dragging the panel.\n\n### Usage of attributes\n\nSo a sample of using the described attributes would look as follows\n\n```\n\u003c?xml version=\"1.0\" encoding=\"utf-8\"?\u003e\n\u003ccheesebaron.slidinguppanel.SlidingUpPanelLayout \n    xmlns:android=\"http://schemas.android.com/apk/res/android\"\n    xmlns:app=\"http://schemas.android.com/apk/res-auto\"\n    android:id=\"@+id/sliding_layout\"\n    android:layout_width=\"match_parent\"\n    android:layout_height=\"match_parent\"\n    android:gravity=\"bottom\"\n    app:collapsedHeight=\"68dp\"\n    app:shadowHeight=\"4dp\"\n    app:fadeColor=\"#ffddaadd\"\u003e\n    \n\u003c/cheesebaron.slidinguppanel.SlidingUpPanelLayout\u003e\n```\n\n## Subscribing to events\n\nThe `SlidingUpPanelLayout` has 4 events which you can listen to in your app.\n\n- `PanelExpanded` which triggers when the panel is expanded\n- `PanelCollapsed` triggers when the panel is collapsed\n- `PanelAnchored` triggers if you have set an `AnchorPoint` on the screen and the panel expands to that point\n- `PanelSlide` triggers whenever the panel is dragged\n\nAs shown in the sample project, the `PanelSlide` event could be used to hide or show the `ActionBar` in an app whenever the sliding up panel has reached a certain point.\n\n## Additional properties and methods\n\nIf you prefer, or want to override a value set in the layout, using a coded approach, several Properties are exposed for your usage.\n\n- `PanelHeight` can be used to set the height of the panel\n- `AnchorPoint` can be used to set a point in the middle of the screen to allow an intermediate expanded state\n- `ShadowDrawable` can be used to set an alternative shadow\n- `SlidingEnabled` can be used to allow or disallow dragging of the panel\n- `CoveredFadeColor` can be used to set the fade color used on top of your main content\n- `IsExpanded`, `IsSlidable`, `PaneVisible`, `IsAnchored` give you the state of the panel\n\nYou also have access to a couple methods to control the panel\n\n- `ShowPane()` and `HidePane()` show and hide the pane triggered in code\n\nFor additional information refer to the Sample project\n","Hash":"9e2c65855c4a4afa365d890105b79a8b","TargetPlatforms":["android"],"TrialHash":null}